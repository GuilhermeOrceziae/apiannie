// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum ProjectUserRole {
  ADMIN
  WRITE
  READ
}

type ProjectUser {
  id   String          @db.ObjectId
  role ProjectUserRole
}

model Project {
  id         String        @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  envs       ProjectEnv[]
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  isMockOpen Boolean       @default(false)
  strice     Boolean       @default(false)
  isJson5    Boolean       @default(true)
  tags       ProjectTag[]
  members    ProjectUser[]
  ownerId    String        @db.ObjectId
  apiIds     String[]      @db.ObjectId

  groups Group[]
  apis   Api[]
}

type ProjectTag {
  name String
  desc String
}

type ProjectEnv {
  name   String
  domain String
  header String[]
  global ProjectGlobal[]
}

type ProjectGlobal {
  name  String
  value String
}

model User {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  password   String
  email      String   @unique
  avatar     String?
  study      Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  projectIds String[] @db.ObjectId
}

model Storage {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  data String
}

model Log {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  type      LogType
  content   String
  username  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum LogType {
  USER
  GROUP
  INTERFACE
  PROJECT
  OTHER
  INTERFACE_COL
}

model Avatar {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  basecode String
  type     String
}

model Group {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  projectId   String   @db.ObjectId
  prefix      String   @default("")
  description String   @default("")
  parentId    String?  @db.ObjectId
  apis        Api[]
  project     Project  @relation(fields: [projectId], references: [id])
  parent      Group?   @relation("GroupStructure", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children    Group[]  @relation("GroupStructure")
}

model Api {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  groupId   String?  @db.ObjectId
  projectId String   @db.ObjectId
  data      ApiData

  group   Group?  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id])
}

type ApiData {
  name        String
  path        String
  method      RequestMethod   @default(GET)
  descripiton String?
  pathParams  RequestParam[]
  queryParams RequestParam[]
  headers     RequestParam[]
  bodyType    RequestBodyType @default(FORM)
  bodyForm    RequestParam[]
  bodyRaw     RequestBodyRaw?
  bodyJson    Json?
  response    Json?
}

enum RequestMethod {
  GET
  POST
  PUT
  PATCH
  DELETE
  OPTION
  HEAD
}

enum RequestBodyType {
  FORM
  JSON
  RAW
}

type RequestBodyRaw {
  example     String?
  descripiton String?
}

type RequestParam {
  name        String
  example     String?
  description String?
  isRequired  Boolean   @default(false)
  type        ParamType @default(STRING)
}

enum ParamType {
  INT
  FLOAT
  BOOLEAN
  STRING
  OBJECT
  ARRAY
  FILE
}
