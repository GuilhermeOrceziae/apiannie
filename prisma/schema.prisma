// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Post {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  slug     String @unique
  title    String
  markdown String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

type KeyValue {
  name  String
  value String
}

type KeyValueEnabled {
  name    String
  value   String
  enabled Boolean @default(true)
}

model Project {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  token             String
  basepath          String
  switchNotice      Boolean
  desc              String
  groupId           String
  projectType       String
  envs              ProjectEnv[]
  icon              String
  color             String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  preScript         String
  afterScript       String
  projectMockScript String
  isMockOpen        Boolean         @default(false)
  strice            Boolean         @default(false)
  isJson5           Boolean         @default(true)
  tags              ProjectTag[]
  Interface         Interface[]
  InterfaceCol      InterfaceCol[]
  InterfaceCat      InterfaceCat[]
  InterfaceCase     InterfaceCase[]
}

type ProjectTag {
  name String
  desc String
}

type ProjectEnv {
  name   String
  domain String
  header String[]
  global ProjectGlobal[]
}

type ProjectGlobal {
  name  String
  value String
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  username  String
  password  String
  email     String   @unique
  passsalt  String
  study     Boolean  @default(false)
  role      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  type      UserType @default(SITE)
}

enum UserType {
  SITE
  THIRD
}

model Storage {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  data String
}

model Log {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  type      LogType
  content   String
  username  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum LogType {
  USER
  GROUP
  INTERFACE
  PROJECT
  OTHER
  INTERFACE_COL
}

model InterfaceCol {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  index       Int
  description String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project   Project @relation(fields: [projectId], references: [id])
  projectId String  @db.ObjectId

  checkHttpCodeIs200  Boolean                        @default(false)
  checkResponseSchema Boolean                        @default(false)
  checkResponseField  InterfaceColCheckResponseField
  checkScript         InterfaceColCheckScript
  InterfaceCase       InterfaceCase[]
}

type InterfaceColCheckResponseField {
  name    String  @default("code")
  value   String  @default("0")
  enabled Boolean @default(false)
}

type InterfaceColCheckScript {
  content String
  enabled Boolean @default(false)
}

model InterfaceCat {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  index       Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project   Project @relation(fields: [projectId], references: [id])
  projectId String  @db.ObjectId
}

model InterfaceCase {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  index Int
  env   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project   Project @relation(fields: [projectId], references: [id])
  projectId String  @db.ObjectId

  col   InterfaceCol @relation(fields: [colId], references: [id])
  colId String       @db.ObjectId

  reqParams    KeyValue[]
  reqHeaders   KeyValue[]
  reqQuery     KeyValueEnabled[]
  reqBodyForm  KeyValueEnabled[]
  reqBodyOther String

  testResBody   String
  testStatus    InterfaceCaseStatus
  testResHeader String
  mockVerify    Boolean             @default(false)
  scriptEnabled Boolean             @default(false)
  testScript    String
}

enum InterfaceCaseStatus {
  OK
  INVALID
  ERROR
}

model Interface {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  path        String
  method      String
  catId       String
  editId      String
  status      InterfaceStatus
  descripiton String
  markdown    String
  static      Boolean         @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project   Project @relation(fields: [projectId], references: [id])
  projectId String  @db.ObjectId

  query InterfaceQuery
}

enum InterfaceStatus {
  UNFINISHED
  FINISHED
}

type InterfaceQuery {
  path   String
  params KeyValue[]
}

model Avatar {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  basecode String
  type     String
}
