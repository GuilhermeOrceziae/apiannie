// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type KeyValue {
  name  String
  value String
}

type KeyValueEnabled {
  name    String
  value   String
  enabled Boolean @default(true)
}

enum WorkspaceUserRole {
  ADMIN
  MEMBER
  VISITOR
}

type WorkspaceUser {
  id   String            @db.ObjectId
  name String
  role WorkspaceUserRole
}

model Workspace {
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  owner     String          @db.ObjectId
  users     WorkspaceUser[]
  projects  Project[]
}

model Project {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  // token         String
  // basepath      String
  // switchNotice  Boolean
  // desc          String
  // projectType   String
  envs           ProjectEnv[]
  // icon              String
  // color             String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  // preScript         String
  // afterScript       String
  // projectMockScript String
  isMockOpen     Boolean         @default(false)
  strice         Boolean         @default(false)
  isJson5        Boolean         @default(true)
  tags           ProjectTag[]
  interface      Interface[]
  interfaceCols  InterfaceCol[]
  interfaceCats  InterfaceCat[]
  interfaceCases InterfaceCase[]
  workspaceId    String

  workspace Workspace @relation(fields: [workspaceId], references: [id])
  groups    Group[]
  apis      Api[]
}

type ProjectTag {
  name String
  desc String
}

type ProjectEnv {
  name   String
  domain String
  header String[]
  global ProjectGlobal[]
}

type ProjectGlobal {
  name  String
  value String
}

type UserWorkspace {
  id   String @db.ObjectId
  name String
}

model User {
  id         String          @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  password   String
  email      String          @unique
  avatar     String?
  study      Boolean         @default(false)
  role       UserRole        @default(DEV)
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  type       UserType        @default(SITE)
  workspaces UserWorkspace[]
}

enum UserRole {
  ADMIN
  DEV
}

enum UserType {
  SITE
  THIRD
}

model Storage {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  data String
}

model Log {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  type      LogType
  content   String
  username  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum LogType {
  USER
  GROUP
  INTERFACE
  PROJECT
  OTHER
  INTERFACE_COL
}

model InterfaceCol {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  index       Int
  description String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project   Project @relation(fields: [projectId], references: [id])
  projectId String  @db.ObjectId

  checkHttpCodeIs200  Boolean                        @default(false)
  checkResponseSchema Boolean                        @default(false)
  checkResponseField  InterfaceColCheckResponseField
  checkScript         InterfaceColCheckScript
  InterfaceCase       InterfaceCase[]
}

type InterfaceColCheckResponseField {
  name    String  @default("code")
  value   String  @default("0")
  enabled Boolean @default(false)
}

type InterfaceColCheckScript {
  content String
  enabled Boolean @default(false)
}

model InterfaceCat {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  index       Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project   Project @relation(fields: [projectId], references: [id])
  projectId String  @db.ObjectId
}

model InterfaceCase {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  index Int
  env   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project   Project @relation(fields: [projectId], references: [id])
  projectId String  @db.ObjectId

  col   InterfaceCol @relation(fields: [colId], references: [id])
  colId String       @db.ObjectId

  reqParams    KeyValue[]
  reqHeaders   KeyValue[]
  reqQuery     KeyValueEnabled[]
  reqBodyForm  KeyValueEnabled[]
  reqBodyOther String

  testResBody   String
  testStatus    InterfaceCaseStatus
  testResHeader String
  mockVerify    Boolean             @default(false)
  scriptEnabled Boolean             @default(false)
  testScript    String
}

enum InterfaceCaseStatus {
  OK
  INVALID
  ERROR
}

model Interface {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  path        String
  method      String
  catId       String
  editId      String
  status      InterfaceStatus
  descripiton String
  markdown    String
  static      Boolean         @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project   Project @relation(fields: [projectId], references: [id])
  projectId String  @db.ObjectId

  query InterfaceQuery
}

enum InterfaceStatus {
  UNFINISHED
  FINISHED
}

type InterfaceQuery {
  path   String
  params KeyValue[]
}

model Avatar {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  basecode String
  type     String
}

model Group {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  projectId   String   @db.ObjectId
  prefix      String   @default("")
  description String   @default("")
  parentId    String?  @db.ObjectId
  apis        Api[]
  project     Project  @relation(fields: [projectId], references: [id])
  parent      Group?   @relation("GroupStructure", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children    Group[]  @relation("GroupStructure")
}

model Api {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  groupId   String?  @db.ObjectId
  projectId String   @db.ObjectId
  data      ApiData

  group   Group?  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id])
}

type ApiData {
  name        String
  path        String
  method      RequestMethod       @default(GET)
  descripiton String?
  params      RequestQueryParam[]
  headers     RequestHeader[]
  reqeustBody RequestBody?
}

enum RequestMethod {
  GET
  POST
  PUT
  PATCH
  DELETE
  OPTION
  HEAD
}

type RequestBody {
  type  RequestBodyType
  param Json
}

enum RequestBodyType {
  FORM_DATA
  FORM_URLENCODED
  JSON
}

type RequestHeader {
  name        String
  description String?
  example     String?
  isOptional  Boolean
}

type RequestQueryParam {
  name        String
  example     String?
  description String?
  isOptional  Boolean
  isArray     Boolean
}

enum ParamType {
  INT
  FLOAT
  BOOLEAN
  STRING
  OBJECT
  ARRAY
}

type Response {
  code        Int
  description String?
  contentType String?
  data        Json
}
